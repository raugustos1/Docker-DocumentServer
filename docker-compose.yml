services:
  onlyoffice-documentserver:
    # Se vai usar a imagem oficial, remova o build:
    # build:
    #   context: .
    image: onlyoffice/documentserver
    container_name: onlyoffice-documentserver
    depends_on:
      - onlyoffice-postgresql
      - onlyoffice-rabbitmq
    environment:
      - DB_TYPE=postgres
      - DB_HOST=onlyoffice-postgresql
      - DB_PORT=5432
      - DB_NAME=onlyoffice
      - DB_USER=onlyoffice
      - AMQP_URI=amqp://guest:guest@onlyoffice-rabbitmq
      # - JWT_ENABLED=true
      # - JWT_SECRET=secret
      # - JWT_HEADER=Authorization
      # - JWT_IN_BODY=true
    # ❌ sem ports para não conflitar com o proxy do Dokploy
    expose:
      - "80"
    healthcheck:
      # O DocumentServer responde em /healthcheck (porta 80 dentro do container)
      test: ["CMD", "curl", "-fsS", "http://localhost/healthcheck"]
      interval: 30s
      retries: 5
      start_period: 60s
      timeout: 10s
    stdin_open: true
    restart: always
    stop_grace_period: 60s
    volumes:
      - /var/www/onlyoffice/Data
      - /var/log/onlyoffice
      - /var/lib/onlyoffice/documentserver/App_Data/cache/files
      - /var/www/onlyoffice/documentserver-example/public/files
      - /usr/share/fonts

  onlyoffice-rabbitmq:
    container_name: onlyoffice-rabbitmq
    image: rabbitmq:3
    restart: always
    expose:
      - "5672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 10s

  onlyoffice-postgresql:
    container_name: onlyoffice-postgresql
    image: postgres:15
    environment:
      - POSTGRES_DB=onlyoffice
      - POSTGRES_USER=onlyoffice
      - POSTGRES_HOST_AUTH_METHOD=trust
    restart: always
    expose:
      - "5432"
    volumes:
      - postgresql_data:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U onlyoffice"]
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 10s

volumes:
  postgresql_data:
